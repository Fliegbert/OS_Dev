;; ASCII A - Z = 65 -  90
;; ASCII a - z = 97 - 122
[BITS 16]

VGA_FONTS equ 5000h

load_vga_fonts:
        ; in: es:di=4k buffer
        ; out: buffer filled with font
        push di
        mov di, VGA_Bitmaps.bitmap_start       ; Memory address where to store the fonts
        push ds
        push es
        ; ask Bios to return VGA bitmap fonts
        ; https://www.ctyme.com/intr/rb-0158.htm for information about Bios call
        mov ax, 0x1130
        mov bh, 6               ; ROM 8x16 font (MCGA, VGA)
        int 0x10
        ; copy charmap
        push es                 ; Push returned pointer to VGA Fonts
        pop ds                  ; Pop pointer into ds
        pop es                  ; Pop old ES back into ES
        mov si, bp              ; Move so DS:SI = VGA Font pointer
        mov cx, 256*16/4        ; 256 = ASCII Characters / 16 Bytes / 4 Bytes per Read
        rep movsd               ; DS:SI -> ES:DI
        pop ds
        pop di
        ret

VGA_Bitmaps:
        .bitmap_start   resb      4096
[BITS 32]

fill_screen:
        mov edi, [vbe_mode_info.phys_base_ptr]
        mov ecx, 800*600
        mov eax, 0xFFFFFFFF
        rep stosd               ; Store eax -> edi
        ret

plot_10_lines:
        ; 800 * 600       = 480000
        ; 800 * 300 + 400 = 240400
        xor eax, eax
        mov edi, [vbe_mode_info.phys_base_ptr]
        add edi, 800*300*4      ; Set position
        mov ecx, 800*4*10
        mov al, 0xFF
        rep stosb               ; Put whats in al at ES:EDI
        ret

print_a_font:
        mov edi, [vbe_mode_info.phys_base_ptr]
        xor eax, eax
        add edi, 800*10*4

        .loop:
                xor eax, eax
                mov eax, Bitmap_VGA_Fonts
                push dword 32
                .char_loop:
                        mov ecx, 8                                                      ; Number of Bits to check
                        mov bl, [eax]
                        inc eax
                        .bit_loop:
                                mov edx, ecx
                                dec edx
                                bt ebx, edx
                                jc .write_text_color
                                mov [edi], dword 0x000000FF                             ; BG Color
                                jmp .next_bit

                                .write_text_color:
                                mov [edi], dword 0x00FFFFFF                             ; FG Color

                                .next_bit:
                                add edi, 4                                              ; Next Pixel in Framebuffer, 1 Pixel = 4 Bytes = 32 BPP (Bits per Pixel)
                                dec ecx                                                 ; Next Bit to check for in bx
                                jnz .bit_loop

                                pop ecx                                                 ; Number of Lines left to print
                                dec ecx
                                jz .done_for_now                                        ; All Lines done given

                                xor edx, edx
                                mov dx, [vbe_mode_info.bytes_per_scanline]              ; Get Bytes per Scanline
                                add edi, edx                                            ; Down one Line in Framebuffer
                                sub edi, 32                                             ; For aligning
                                push ecx
                                jmp .char_loop
                        
                        .done_for_now:
                        xor edx, edx
                        mov dx, [vbe_mode_info.bytes_per_scanline]
                        imul edx, 15
                        sub edi, edx
                        add edi, 8

                        .end:
                        ret

print_string:
        push ebp
        mov ebp, esp
        sub esp, 4

        push edi
        push esi
        push ebx
        push ecx
        push edx
        
        ;; load bitmap to 5000h
        xor eax, eax
        ;; Set up EDI with row/col to print to
        mov edi, [vbe_mode_info.phys_base_ptr]
        
        add edi, 800*10*4
        mov esi, [ebp+8]

        .loop:
                xor eax, eax
                lodsb
                cmp al, 0
                je .end

                ; Print character
                shl eax, 4
                sub eax, 16
                add eax, Bitmap_VGA_Fonts
                sub eax, 496
                push dword 16
                .char_loop:
                        mov ecx, 8                                                      ; Number of Bits to check
                        mov bl, [eax]
                        inc eax
                        .bit_loop:
                                mov edx, ecx
                                dec edx
                                bt bx, dx
                                jc .write_text_color
                                mov [edi], dword 0x000000FF                             ; BG Color
                                jmp .next_bit

                                .write_text_color:
                                mov [edi], dword 0x00FFFFFF                             ; FG Color

                                .next_bit:
                                add edi, 4                                              ; Next Pixel in Framebuffer, 1 Pixel = 4 Bytes = 32 BPP (Bits per Pixel)
                                dec ecx                                                 ; Next Bit to check for in bx
                                jnz .bit_loop

                                pop ecx                                                 ; Number of Lines left to print
                                dec ecx
                                jz .done_for_now                                        ; All Lines done given
                                xor edx, edx
                                mov dx, [vbe_mode_info.bytes_per_scanline]              ; Get Bytes per Scanline
                                add edi, edx                                            ; Down one Line in Framebuffer
                                sub edi, 32                                             ; For aligning
                                push ecx
                                jmp .char_loop
                        
                .done_for_now:
                xor edx, edx
                mov dx, [vbe_mode_info.bytes_per_scanline]
                imul edx, 15
                sub edi, edx
                
                mov ebx, [ebp+8]

                inc word [ebx]
                cmp word [ebx], 80
                jne .loop

                .end:
                pop edx
                pop ecx
                pop ebx
                pop esi
                pop edi

                mov esp, ebp
                pop ebp
                ret

Bitmap_VGA_Fonts:
        ;; Space ' ' or '_' - starts at ascii 32/20h
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Exclamation mark '!'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Double quotes '"'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01000100b,\
	   01000100b,\
	   01000100b,\
	   01000100b,\
	   01000100b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Octothorpe/pound sign/hash/number/etc. '#'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00100010b,\
	   00100010b,\
	   00100010b,\
	   11111110b,\
	   01000100b,\
	   01000100b,\
	   11111110b,\
	   10001000b,\
	   10001000b,\
	   10001000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Dollar sign '$' - it's the capital S with a line through it
	db 00000000b,\
	   00000000b,\
	   00010000b,\
	   01111100b,\
	   10010010b,\
	   10010010b,\
	   10010000b,\
	   01010000b,\
	   00111100b,\
	   00010010b,\
	   10010010b,\
	   10010010b,\
	   01111100b,\
	   00010000b,\
	   00000000b,\
	   00000000b
	;; Percent sign '%'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01100010b,\
	   10010100b,\
	   10010100b,\
	   01101000b,\
	   00010000b,\
	   00010000b,\
	   00101100b,\
	   01010010b,\
	   01010010b,\
	   10001100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Ampersand '&'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00111000b,\
	   01000100b,\
	   01000100b,\
	   00101000b,\
	   00110000b,\
	   01010010b,\
	   10001010b,\
	   10000100b,\
	   10001100b,\
	   01110010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Single quote '''
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Open paranthesis '('
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00100000b,\
	   00100000b,\
	   01000000b,\
	   01000000b,\
	   01000000b,\
	   01000000b,\
	   00100000b,\
	   00100000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Close paranthesis ')' 10
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00001000b,\
	   00000100b,\
	   00000100b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000100b,\
	   00000100b,\
	   00001000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Asterisk (and Obelisk) '*'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   10010010b,\
	   01010100b,\
	   00111000b,\
	   01010100b,\
	   10010010b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Plus '+'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   11111110b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Comma ','
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00011000b,\
	   00001000b,\
	   00001000b,\
	   00010000b,\
	   00000000b
	;; Hyphen '-'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Period/dot/fullstop '.'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00011000b,\
	   00011000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Divide/forward slash '/'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000010b,\
	   00000100b,\
	   00000100b,\
	   00001000b,\
	   00010000b,\
	   00010000b,\
	   00100000b,\
	   01000000b,\
	   01000000b,\
	   10000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Zero '0' - starts at ascii 48/30h
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00111000b,\
	   01000100b,\
	   10000010b,\
	   10000110b,\
	   10001010b,\
	   10010010b,\
	   10100010b,\
	   11000010b,\
	   01000100b,\
	   00111000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; One '1'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00110000b,\
	   01010000b,\
	   10010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Two '2'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   00000010b,\
	   00001100b,\
	   00010000b,\
	   00100000b,\
	   11000000b,\
	   11000000b,\
	   11111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Three '3'    20
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   00000010b,\
	   00111100b,\
	   00000010b,\
	   00000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Four '4'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00001100b,\
	   00010100b,\
	   00100100b,\
	   01000100b,\
	   10000100b,\
	   10000100b,\
	   11111110b,\
	   00000100b,\
	   00000100b,\
	   00000100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Five '5'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   11111100b,\
	   00000010b,\
	   00000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Six '6'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00111110b,\
	   01000000b,\
	   10000000b,\
	   10000000b,\
	   11111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Seven '7'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   00000010b,\
	   00000010b,\
	   00000100b,\
	   00000100b,\
	   00000100b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Eight '8'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Nine '9'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111110b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000100b,\
	   01111000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Colon ':'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00011000b,\
	   00011000b,\
	   00000000b,\
	   00000000b,\
	   00011000b,\
	   00011000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Semicolon ';'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00011000b,\
	   00011000b,\
	   00000000b,\
	   00000000b,\
	   00011000b,\
	   00001000b,\
	   00001000b,\
	   00010000b,\
	   00000000b
	;; Less than '<'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000100b,\
	   00001000b,\
	   00010000b,\
	   00100000b,\
	   01000000b,\
	   00100000b,\
	   00010000b,\
	   00001000b,\
	   00000100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Equal '='    30
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111110b,\
	   00000000b,\
	   00000000b,\
	   01111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Greater than '>'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00100000b,\
	   00010000b,\
	   00001000b,\
	   00000100b,\
	   00000010b,\
	   00000100b,\
	   00001000b,\
	   00010000b,\
	   00100000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Question mark '?'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   00000010b,\
	   00000100b,\
	   00001000b,\
	   00001000b,\
	   00000000b,\
	   00001000b,\
	   00001000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; At symbol '@'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00111100b,\
	   01000010b,\
	   10001010b,\
	   10010110b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10001110b,\
	   01000000b,\
	   00111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'A' - starts at ascii 65/41h 34
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00101000b,\
	   01000100b,\
	   10000010b,\
	   10000010b,\
	   11111110b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'B'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'C'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'D'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111000b,\
	   10000100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000100b,\
	   11111000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'E'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   11111100b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   11111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'F'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   11111100b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'G'          40
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000000b,\
	   10000000b,\
	   10011110b,\
	   10000010b,\
	   10000010b,\
	   10000110b,\
	   01111010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'H'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11111110b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'I'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   11111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'J'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00111110b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   10001000b,\
	   10001000b,\
	   01110000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'K'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000100b,\
	   10001000b,\
	   10010000b,\
	   10100000b,\
	   11000000b,\
	   11000000b,\
	   10100000b,\
	   10010000b,\
	   10001000b,\
	   10000100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'L'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   11111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'M'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   11000110b,\
	   11000110b,\
	   10101010b,\
	   10010010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'N'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   11000010b,\
	   11000010b,\
	   10100010b,\
	   10100010b,\
	   10010010b,\
	   10010010b,\
	   10001010b,\
	   10001010b,\
	   10000110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'O'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'P'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11111100b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'Q'          50
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10110010b,\
	   11001010b,\
	   01111100b,\
	   00000110b,\
	   00000000b,\
	   00000000b
	;; 'R'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11111100b,\
	   10001000b,\
	   10000100b,\
	   10000100b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'S'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   01000000b,\
	   00110000b,\
	   00001100b,\
	   00000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'T'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'U'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'V'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01000100b,\
	   01000100b,\
	   01000100b,\
	   00101000b,\
	   00101000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'W'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10010010b,\
	   10101010b,\
	   11000110b,\
	   11000110b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'X'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000100b,\
	   10000100b,\
	   01001000b,\
	   01001000b,\
	   00110000b,\
	   00110000b,\
	   01001000b,\
	   01001000b,\
	   10000100b,\
	   10000100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'Y'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   01000100b,\
	   01000100b,\
	   00101000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'Z'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   00000010b,\
	   00000010b,\
	   00000100b,\
	   00001000b,\
	   00010000b,\
	   00100000b,\
	   01000000b,\
	   10000000b,\
	   11111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Open bracket '['     60
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   11110000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   11110000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Backslash '\'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000000b,\
	   10000000b,\
	   01000000b,\
	   00100000b,\
	   00100000b,\
	   00010000b,\
	   00001000b,\
	   00001000b,\
	   00000100b,\
	   00000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Close bracket ']'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00011110b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   00011110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Caret '^'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00111000b,\
	   01000100b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Underscore '_'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Backtick/grave '`'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00001000b,\
	   00000100b,\
	   00000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'a' - starts at ascii 97/61h   
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   00000010b,\
	   01111110b,\
	   10000010b,\
	   10000010b,\
	   10000110b,\
	   01111010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'b'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000000b,\
	   10000000b,\
	   10111100b,\
	   11000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11000010b,\
	   10111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'c'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'd'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000010b,\
	   00000010b,\
	   01111010b,\
	   10000110b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000110b,\
	   01111010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'e'          70
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   11111110b,\
	   10000000b,\
	   10000000b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'f'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00001110b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   11111110b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'g'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000010b,\
	   01111100b,\
	   10000100b,\
	   10000100b,\
	   10000100b,\
	   01111000b,\
	   01000000b,\
	   01111100b,\
	   00000010b,\
	   00000010b,\
	   01111100b,\
	   00000000b
	;; 'h'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10111100b,\
	   11000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'i'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00010000b,\
	   00000000b,\
	   00110000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'j'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00001000b,\
	   00001000b,\
	   00000000b,\
	   00011000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   00001000b,\
	   10010000b,\
	   01100000b,\
	   00000000b
	;; 'k'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   10000000b,\
	   10000100b,\
	   10001000b,\
	   10010000b,\
	   10100000b,\
	   11000000b,\
	   10100000b,\
	   10010000b,\
	   10001000b,\
	   10000100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'l'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00110000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'm'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   11101100b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'n'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10111100b,\
	   11000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'o'          80
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'p'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10111100b,\
	   11000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   11000010b,\
	   10111100b,\
	   10000000b,\
	   10000000b,\
	   00000000b
	;; 'q'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111010b,\
	   10000110b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000110b,\
	   01111010b,\
	   00000010b,\
	   00000010b,\
	   00000000b
	;; 'r'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10111100b,\
	   11000010b,\
	   10000010b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   10000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 's'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   01111100b,\
	   10000010b,\
	   10000000b,\
	   01100000b,\
	   00011100b,\
	   00000010b,\
	   10000010b,\
	   01111100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 't'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   01111100b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00001100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'u'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000110b,\
	   01111010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'v'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01000100b,\
	   01000100b,\
	   00101000b,\
	   00111000b,\
	   00010000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'w'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   10010010b,\
	   01101100b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'x'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   01000100b,\
	   01000100b,\
	   00111000b,\
	   01000100b,\
	   10000010b,\
	   10000010b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; 'y'          90
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   10000010b,\
	   01000110b,\
	   00111010b,\
	   00000010b,\
	   00000010b,\
	   00000010b,\
	   01111100b,\
	   00000000b
	;; 'z'
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b,\
	   00000010b,\
	   00000100b,\
	   00001000b,\
	   00010000b,\
	   00100000b,\
	   01000000b,\
	   11111110b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Open brace '{'
	db 00000000b,\
	   00000000b,\
	   00111000b,\
	   01000000b,\
	   01000000b,\
	   00100000b,\
	   00100000b,\
	   01000000b,\
	   10000000b,\
	   01000000b,\
	   00100000b,\
	   00100000b,\
	   01000000b,\
	   01000000b,\
	   00111000b,\
	   00000000b
	;; Vertical bar '|'
	db 00000000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00010000b,\
	   00000000b
	;; Close brace '}'
	db 00000000b,\
	   00000000b,\
	   00111000b,\
	   00000100b,\
	   00000100b,\
	   00001000b,\
	   00001000b,\
	   00000100b,\
	   00000010b,\
	   00000100b,\
	   00001000b,\
	   00001000b,\
	   00000100b,\
	   00000100b,\
	   00111000b,\
	   00000000b
	;; Tilde '~'
	db 00000000b,\
	   00000000b,\
	   01100010b,\
	   10010010b,\
	   10001100b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b
	;; Extra char for a visible 'cursor' - normally ascii 127 is 'delete'   96
	db 00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   00000000b,\
	   11111110b

